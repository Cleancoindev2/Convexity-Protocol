/**
 *
 * autogenerated by solidity-visual-auditor
 *
 * execute with:
 *  #> truffle test <path/to/this/test.js>
 *
 * */

const promisify = (inner) =>
  new Promise((resolve, reject) =>
    inner((err, res) => {
      if (err) { reject(err) }

      resolve(res);
    })
  );

const Util = require('./util.js');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))
const util = new Util(web3);

var expect = require('expect');
var OptionsContract = artifacts.require("../contracts/OptionsContract.sol");
var OptionsFactory = artifacts.require("../contracts/OptionsFactory.sol");
var OptionsExchange = artifacts.require("../contracts/OptionsExchange.sol");
var CompoundOracle = artifacts.require("../contracts/MockCompoundOracle.sol");
var UniswapFactory = artifacts.require("../contracts/MockUniswapFactory.sol");
var OptionsContractJSON = require("../build/contracts/OptionsContract.json");
var OptionsContractABI = OptionsContractJSON.abi;
var { ContractCreated }= require('./utils/FactoryEvents.js')

const truffleAssert = require('truffle-assertions');
// var AssetAdded = FactoryEvents.AssetAdded;

// Initialize the Options Factory, Options Exchange and other mock contracts
contract('OptionsContract', (accounts) => {
  var creatorAddress = accounts[0];
  var firstOwnerAddress = accounts[1];
  var secondOwnerAddress = accounts[2];
  var externalAddress = accounts[3];
  var unprivilegedAddress = accounts[4]
  /* create named accounts for contract roles */

  let optionsContract;

  before(async () => {
    try {
      // 1. Deploy mock contracts
      // 1.1 Compound Oracle
      var compoundOracle = await CompoundOracle.deployed();
      // 1.2 Uniswap Factory
      var uniswapFactory = await UniswapFactory.deployed();
      // 2. Deploy our contracts
      // deploys the Options Exhange contract
      var optionsExchange = await OptionsExchange.deployed();

      // TODO: remove this later. For now, set the compound Oracle and uniswap Factory addresses here.
      var uniswapFactoryAddr = uniswapFactory.address;
      optionsExchange.setUniswapAndCompound(uniswapFactory.address, compoundOracle.address).then(
        expect(await promisify(cb => optionsExchange.UNISWAP_FACTORY(cb))).toBe(uniswapFactoryAddr)

  );
    var optionsFactory = await OptionsFactory.deployed();
      // const result = await optionsFactory.addAsset(
      //   "ETH",
      //   "0x0000000000000000000000000000000000000001"
      // );
      //TODO: why does uncommenting the above cause errors?


      var optionsContractResult = await optionsFactory.createOptionsContract(
        "ETH",
        "ETH",
        "96",
        "ETH",
        "ETH",
        "1577836800",
      );

      const optionsContractAddr = optionsContractResult.logs[0].args[0];
      console.log(optionsContractAddr);

      optionsContract = new web3.eth.Contract(OptionsContractABI,optionsContractAddr, {from: creatorAddress, gasPrice: '20000000000'})

    } catch (err) {
      console.error(err);
    }

  });

  describe("#openRepo()", () => {
    it("should open first repo correctly", async () => {
      var result = await promisify(cb =>  optionsContract.methods.openRepo().send({from: creatorAddress, gas: '100000'}, cb))
      var returnValues = (await optionsContract.getPastEvents( 'RepoOpened', { fromBlock: 0, toBlock: 'latest' } ))[0].returnValues;
      var repoIndex = returnValues.repoIndex;
      expect(repoIndex).toBe("0");
    })

    it("should open second repo correctly", async () => {
      var result = await promisify(cb =>  optionsContract.methods.openRepo().send({from: creatorAddress, gas: '100000'}, cb))
      var returnValues1 = (await optionsContract.getPastEvents( 'RepoOpened', { fromBlock: 0, toBlock: 'latest' } ))[1].returnValues;
      var repoIndex1 = returnValues1.repoIndex;
      expect(repoIndex1).toBe("1");
    })


    it("should add ETH collateral successfully", async () => {
      var result = await promisify(cb =>  optionsContract.methods.openRepo().send({from: creatorAddress, gas: '100000'}, cb))
      var returnValues1 = (await optionsContract.getPastEvents( 'RepoOpened', { fromBlock: 0, toBlock: 'latest' } ))[1].returnValues;
      var repoIndex1 = returnValues1.repoIndex;
      expect(repoIndex1).toBe("1");
    })

    // it("fails if an asset is added twice", async () => {
    //   try {
    //     // await util.setBlockNumberForward(8);
    //     await optionsFactory.addAsset(
    //       "DAI",
    //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
    //     )
    //
    //   } catch (err) {
    //     return;
    //     // console.log(err)
    //     // util.assertThrowMessage(err);
    //   }
    //   expect.fail("should throw error")
    // })


  });

  describe("#addETHCollateral()", () => {


    it("should add ETH collateral successfully", async () => {
      const repoNum = 1;
      var msgValue = "10000000";
      var result = await promisify(cb =>  optionsContract.methods.addETHCollateral(repoNum).send({from: creatorAddress, gas: '100000', value: msgValue}, cb))
      var returnValues = (await optionsContract.getPastEvents( 'ETHCollateralAdded', { fromBlock: 0, toBlock: 'latest' } ))[0].returnValues;
      var repoIndex1 = returnValues.repoIndex;
      var amount = returnValues.amount;
      expect(repoIndex1).toBe("1");
      expect(amount).toBe("10000000");
    })
  });

  //   it("should not allow you to add erc20 collateral", async () => {
  //
  //     const result = await optionsFactory.addAsset(
  //       "DAI",
  //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //     )
  //
  //     truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
  //       return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
  //     });
  //
  //     console.log(web3.utils.keccak256("DAI"))
  //     console.log(result.logs[0])
  //
  //
  //   })


    // describe("#changeAsset()", () => {
  //   it("should change an asset correctly", async () => {
  //
  //     const result = await optionsFactory.addAsset(
  //       "DAI",
  //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //     )
  //
  //     truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
  //       return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
  //     });
  //
  //     console.log(web3.utils.keccak256("DAI"))
  //     console.log(result.logs[0])
  //
  //
  //   })
  //
  //   it("fails if an asset is added twice", async () => {
  //     try {
  //       // await util.setBlockNumberForward(8);
  //       await optionsFactory.addAsset(
  //         "DAI",
  //         "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //       )
  //
  //     } catch (err) {
  //       return;
  //       // console.log(err)
  //       // util.assertThrowMessage(err);
  //     }
  //     expect.fail("should throw error")
  //   })
  //
  //
  // });

  // describe("#createOptionsContract()", () => {
  //   it("should change an asset correctly", async () => {
  //     try {
  //       optionsContractAddr = await optionsFactory.createOptionsContract.call(
  //         "ETH",
  //         "ETH",
  //         "95",
  //         "ETH",
  //         "ETH",
  //         "109182389"
  //       );
  //     } catch (err) {
  //       expect.fail("could not create contracts")
  //     }
  //   })
  //
  // });


  describe("#issueOptionTokens()", () => {
    it("should allow you to mint correctly", async () => {

      const repoIndex = 1;
      const numTokens = 10000000/2 ;

      var result = await promisify(cb =>  optionsContract.methods.issueOptionTokens(repoIndex, numTokens).send({from: creatorAddress, gas: '100000'}, cb))
      var returnValues = (await optionsContract.getPastEvents( 'ETHCollateralAdded', { fromBlock: 0, toBlock: 'latest' } ))[0].returnValues;
      // console.log(result)
      // console.log(returnValues)
    })

    it("should not allow you to mint from wrong repo", async () => {

      // const repoIndex = 1;
      //
      // var result = await promisify(cb =>  optionsContract.methods.issueOptionTokens(repoIndex, numTokens).send({from: creatorAddress, gas: '100000', value: "10000000"}, cb))
      // var returnValues = (await optionsContract.getPastEvents( 'ETHCollateralAdded', { fromBlock: 0, toBlock: 'latest' } ))[0].returnValues;

    })
  });

});