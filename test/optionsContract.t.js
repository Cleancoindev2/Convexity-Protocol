/**
 *
 * autogenerated by solidity-visual-auditor
 *
 * execute with:
 *  #> truffle test <path/to/this/test.js>
 *
 * */
const Util = require('./util.js');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))
const util = new Util(web3);
var { expect } = require('expect.js');
var OptionsContract = artifacts.require("/Users/zubinkoticha/WebstormProjects/OptionsProtocol/contracts/OptionsContract.sol");
var OptionsFactory = artifacts.require("/Users/zubinkoticha/WebstormProjects/OptionsProtocol/contracts/OptionsFactory.sol");
var { AssetAdded }= require('./utils/FactoryEvents.js')
const truffleAssert = require('truffle-assertions');
// var AssetAdded = FactoryEvents.AssetAdded;

contract('OptionsContract', (accounts) => {
  var creatorAddress = accounts[0];
  var firstOwnerAddress = accounts[1];
  var secondOwnerAddress = accounts[2];
  var externalAddress = accounts[3];
  var unprivilegedAddress = accounts[4]
  /* create named accounts for contract roles */

  let optionsContractAddr;


    let ConstructorArgs = {
      collateralAddr:  "0x0000000000000000000000000000000000000000",
      underlyingAddr :  "0x0000000000000000000000000000000000000000",
      strikePrice: 95,
      strikeAddr: "0x0000000000000000000000000000000000000000",
      payoutAddr: "0x0000000000000000000000000000000000000000",
      expiry: 1239823
    }

  before(async () => {
    // optionsContract = await OptionsContract.deployed(
    //   ConstructorArgs.collateralAddr,
    //   ConstructorArgs.underlyingAddr,
    //   ConstructorArgs.strikePrice,
    //   ConstructorArgs.strikeAddr,
    //   ConstructorArgs.payoutAddr,
    //   ConstructorArgs.expiry);
    try {
      optionsFactory = await OptionsFactory.deployed();
      const result = await optionsFactory.addAsset(
        "ETH",
        "0x0000000000000000000000000000000000000001"
      );
      optionsContractAddr = await optionsFactory.createOptionsContract.call(
        "ETH",
        "ETH",
        "95",
        "ETH",
        "ETH",
        "109182389"
      );

      console.log(optionsContractAddr)


    } catch (err) {
      console.error(err);
    }

  });



  // describe("#addAsset()", () => {
  //   it("should add an asset correctly", async () => {
  //
  //     const result = await optionsFactory.addAsset(
  //       "DAI",
  //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //     )
  //
  //     truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
  //       return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
  //     });
  //
  //     console.log(web3.utils.keccak256("DAI"))
  //     console.log(result.logs[0])
  //
  //
  //   })
  //
  //   it("fails if an asset is added twice", async () => {
  //     try {
  //       // await util.setBlockNumberForward(8);
  //       await optionsFactory.addAsset(
  //         "DAI",
  //         "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //       )
  //
  //     } catch (err) {
  //       return;
  //       // console.log(err)
  //       // util.assertThrowMessage(err);
  //     }
  //     expect.fail("should throw error")
  //   })


  // });

  // describe("#changeAsset()", () => {
  //   it("should change an asset correctly", async () => {
  //
  //     const result = await optionsFactory.addAsset(
  //       "DAI",
  //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //     )
  //
  //     truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
  //       return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
  //     });
  //
  //     console.log(web3.utils.keccak256("DAI"))
  //     console.log(result.logs[0])
  //
  //
  //   })
  //
  //   it("fails if an asset is added twice", async () => {
  //     try {
  //       // await util.setBlockNumberForward(8);
  //       await optionsFactory.addAsset(
  //         "DAI",
  //         "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //       )
  //
  //     } catch (err) {
  //       return;
  //       // console.log(err)
  //       // util.assertThrowMessage(err);
  //     }
  //     expect.fail("should throw error")
  //   })
  //
  //
  // });

  // describe("#createOptionsContract()", () => {
  //   it("should change an asset correctly", async () => {
  //     try {
  //       optionsContractAddr = await optionsFactory.createOptionsContract.call(
  //         "ETH",
  //         "ETH",
  //         "95",
  //         "ETH",
  //         "ETH",
  //         "109182389"
  //       );
  //     } catch (err) {
  //       expect.fail("could not create contracts")
  //     }
  //   })
  //
  // });

});