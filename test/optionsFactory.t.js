/**
 *
 * autogenerated by solidity-visual-auditor
 *
 * execute with:
 *  #> truffle test <path/to/this/test.js>
 *
 * */
const Util = require('./util.js');
const Web3 = require('web3');
const web3 = new Web3(new Web3.providers.HttpProvider('http://localhost:8545'))
const util = new Util(web3);
var { expect } = require('expect.js');
var OptionsFactory = artifacts.require("/Users/zubinkoticha/WebstormProjects/OptionsProtocol/contracts/OptionsFactory.sol");
var { AssetAdded }= require('./utils/FactoryEvents.js')
const truffleAssert = require('truffle-assertions');
// var AssetAdded = FactoryEvents.AssetAdded;

contract('OptionsFactory', (accounts) => {
  var creatorAddress = accounts[0];
  var firstOwnerAddress = accounts[1];
  var secondOwnerAddress = accounts[2];
  var externalAddress = accounts[3];
  var unprivilegedAddress = accounts[4]
  /* create named accounts for contract roles */

  let optionsFactory;

  before(async () => {
    optionsFactory = await OptionsFactory.deployed();
  })

  beforeEach(async () => {
    /* before each context */
  })

  let optionsContractAddr;

  describe("#addAsset()", () => {
    it("should add an asset correctly", async () => {

      const result = await optionsFactory.addAsset(
        "DAI",
        "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
      )

      truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
        return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
      });

      // console.log(web3.utils.keccak256("DAI"))
      // console.log(result.logs[0])


    })

    it("fails if an asset is added twice", async () => {
      try {
        // await util.setBlockNumberForward(8);
        await optionsFactory.addAsset(
          "DAI",
          "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
        )

      } catch (err) {
        return;
        // console.log(err)
        // util.assertThrowMessage(err);
      }
      expect.fail("should throw error")
    })


  });

      //
  //     const result = await optionsFactory.addAsset(
  //       "DAI",
  //       "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //     )
  //
  //     truffleAssert.eventEmitted(result, 'AssetAdded', (ev) => {
  //       return ev.asset === web3.utils.keccak256("DAI") && ev.addr === '0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359'
  //     });
  //
  //     console.log(web3.utils.keccak256("DAI"))
  //     console.log(result.logs[0])
  //
  //
  //
  //   it("fails if an asset is added twice", async () => {
  //     try {
  //       // await util.setBlockNumberForward(8);
  //       await optionsFactory.addAsset(
  //         "DAI",
  //         "0x89d24A6b4CcB1B6fAA2625fE562bDD9a23260359"
  //       )
  //
  //     } catch (err) {
  //       return;
  //       // console.log(err)
  //       // util.assertThrowMessage(err);
  //     }
  //     expect.fail("should throw error")
  //   })
  //
  //
  // });



  describe("#createOptionsContract()", () => {
    it("should change an asset correctly", async () => {
      try {
        optionsContractAddr = await optionsFactory.createOptionsContract.call(
          "ETH",
          "ETH",
          "95",
          "ETH",
          "ETH",
          "109182389"
        );
      } catch (err) {
        expect.fail("could not create contracts")
      }
    })

  });
});


// it('should revert if ...', () => {
  //   return OptionsFactory.deployed()
  //     .then(instance => {
  //       return instance.publicOrExternalContractMethod(argument1, argument2, {from:externalAddress});
  //     })
  //     .then(result => {
  //       assert.fail();
  //     })
  //     .catch(error => {
  //       assert.notEqual(error.message, "assert.fail()", "Reason ...");
  //     });
  // });

  // context('testgroup - security tests - description...', () => {
  //
  //   //deploy a new contract
  //   before(async () => {
  //     /* before tests */
  //     const newOptionsFactory =  await OptionsFactory.new()
  //   })
  //
  //   beforeEach(async () => {
  //     /* before each tests */
  //   })
  //
  //   it('fails on initialize ...', async () => {
  //     return assertRevert(async () => {
  //       await newOptionsFactory.initialize()
  //     })
  //   })
  //
  //   it('checks if method returns true', async () => {
  //     assert.isTrue(await newOptionsFactory.thisMethodShouldReturnTrue())
  //   })
  //
  // })
